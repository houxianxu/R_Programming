data.frame(amzn)
data <- data.frame(amzn)
str(data)
data
head(data)
data.frame(amzn,stringsAsFactors=F)
data <- data.frame(amzn,stringsAsFactors=F)
str(data)
amzn
head(amzn)
amzn['2007-01-03']
as.Date(amzn)
amzn['2007']
nrow(amzn['2012'])
sampleTimes
as.Date(sampleTimes)
?as.Date
as.Date(sampleTimes, "%Y-%b-%d")
xx <- as.Date(sampleTimes, "%Y-%b-%d")
xx[xx > as.Date("2012") & xx < as.Date("2013")]
xx[xx > as.Date("2012-01-01") & xx < as.Date("2013-01-01")]
length(xx[xx > as.Date("2012-01-01") & xx < as.Date("2013-01-01")])
weekdays(xx)
yy <- xx[xx > as.Date("2012-01-01") & xx < as.Date("2013-01-01")]
yy[yy == "星期一"]
yy[1]
yy[weekdays(yy) == "星期一"]
length(yy[weekdays(yy) == "星期一"])
?append
append(1:5, 0:1, after = 3)
library(lattice)
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality)
library(ggplot2)
str(mpg)
ls
ls()
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color =drv)
qplot(displ, hwy, data = mpg, color =drv, geom = c("point"))
qplot(displ, hwy, data = mpg, color =drv, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, color =drv, geom = c("smooth"))
qplot(displ, data = mpg)
qplot(displ, data = mpg, color = drv)
qplot(displ, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = drv ~ .)
qplot(hwy,data = mpg, facets = drv ~ .)
qplot(hwy,data = mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy,data = mpg, facets = drv ~ ., binwidth = 44)
qplot(hwy,data = mpg, facets = drv ~ ., binwidth = 2)
dir()
rm "Thumb.db"
remove
rm ("Thumb.db")
remove ("Thumb.db")
?ggplot
x <- 1:100
x
seq(0,1, length = 4)
cutpoints <- quantile(x)
cutpoints
xx <- cut(x, cutpoints)
xx
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?print.trellis()
?splom()
?trellis.par.set()
str(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?hcluster
?hclust
hc <- hclust(dist(USArrests), "ave")
plot(hc)
hc <- hclust(dist(USArrests))
plot(hc)
heatmap
?heatmap
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
?heapmap
?heatmap
heatmap(dataFrame)
dataFrame
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
dataFrame <- data.frame(x = x, y = y)
heatmap(dataFrame)
sample(1:12)
sample(1:12)
heatmap(as.matrix(dataFrame))
View(ames)
write.table(ames, "houxianxutmp.csv")
dir()
libary(knitr)
library(knitr)
install.packages("knitr")
library(knitr)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
library(rmarkdown)
?rmarkdown
render("input.Rmd", html_document())
render("input.Rmd", html_document())
library(rmarkdown)
render("input.Rmd", html_document())
render("input.Rmd", pdf_document(toc = TRUE, "--listings"))
preview
??preview
Previes
Preview
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
source('~/.active-rstudio-document', echo=TRUE)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab", type="source")
install.packages("kernlab", type="source")
library(kernlab)
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
install.packages("kernlab")
install.packages("C:/Users/Houxianxu/Desktop/kernlab_0.1-4.tar.gz", repos = NULL, type = "source")
libary(kernlab)
library(kernlab)
install.packages("C:/Users/Houxianxu/Desktop/kernlab_0.1-4.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Houxianxu/Desktop/kernlab_0.9-18.tar.gz", repos = NULL, type = "source")
library(kernlab)
spam
data(spam)
spam
?data
data
()
data
()
data()
ticdata
data(ticdata)
set.seed(232)
set.seed(511)
dim(spam)
trainIndicator <- rbinom(4601, size - 1, prob = 0.5)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
trainIndicator
?rbinom
trainIndicator <- rbinom(4601, size = 2, prob = 0.5)
trainIndicator
sample(1:100,50)
?sample
sample.int(1:100,50)
str(spam)
head(spam)
trainIndicator
spam[trainIndicator == 1, ]
View(spam)
library(ggplot2)
library(ggplot)
library(ggplot2)
ggplot(spam, aes(type, capitalAve))  + geom_boxplot()
spam$type
as.numeric(spam$type)
?reformulate
cor(spam$charDollar, spam$type)
cor(spam$charDollar, as.numeric(spam$type))
cor(spam$charExclamation, as.numeric(spam$type))
?join
library(plyr)
?join
cars
library(plyr)
library(ggplot2)
data_no_NA <- data[!is.na(data$steps), ]
date.steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
g <- ggplot(date.steps, aes(x = date, y = steps)) + geom_bar(stat = "identity")
unzip("repdata-data-activity.zip")
data <- read.csv("activity.csv", stringsAsFactors = F)
data$date <- as.Date(data$date, "%Y%m%d"
unzip("repdata-data-activity.zip")
data <- read.csv("activity.csv", stringsAsFactors = F)
data$date <- as.Date(data$date, "%Y%m%d")
setwd("E:/study/ComputerPrograms/courseCode/dataScienceCoursera/Reproducible_Research/Assessment_1")
g <- ggplot(date.steps, aes(x = date) + geom_bar()
ggplot(mtcars, aes(mpg, wt)) + geom_bar(stat = "identity")
ggplot(mtcars, aes(mpg, wt)) + geom_bar(stat = "identity")
library(knit)
library(knitr)
library(knitr)
library(knitr)
date.stesps
date.steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
data <- read.csv("activity.csv", stringsAsFactors = F)
data$date <- as.Date(data$date, "%Y%m%d")
library(plyr)
library(ggplot2)
library(knitr)
data_no_NA <- data[!is.na(data$steps), ]
date.steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
date.steps
data_no_NA
View(data_no_NA)
data_no_NA <- data[!is.na(data$steps), ]
data$date <- as.Date(data$date, "%Y%m%d")
View(data)
data$steps
is.na(data$steps)
!is.na(data$steps)
data_no_NA <- data[!is.na(data$steps), ]
View(data_no_NA)
x <- !is.na(data$steps)
data[x, ]
data <- read.csv("activity.csv", stringsAsFactors = F)
View(data)
as.Date(data$date)
data$date <- as.Date(data$date, "%Y-%m-%d")
data
ggplot(date.steps, aes(date, steps)) + geom_bar(stat = "identity")
date.steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
ggplot(date.steps, aes(date, steps)) + geom_bar(stat = "identity")
library(ggplot2)
library(plyr)
library(ggplot2)
library(knitr)
data_no_NA <- data[!is.na(data$steps), ]
date.steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
ggplot(date.steps, aes(date, steps)) + geom_bar(stat = "identity")
library(plyr)
library(ggplot2)
library(knitr)
data_no_NA <- data[!is.na(data$steps), ]
date.steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
ggplot(date.steps, aes(date, steps)) + geom_bar(stat = "identity")
unzip("repdata-data-activity.zip")
data <- read.csv("activity.csv", stringsAsFactors = F)
data$date <- as.Date(data$date, "%Y-%m-%d")
```
## What is mean total number of steps taken per day?
1. Make a histogram of the total number of steps taken each day
```{r}
library(plyr)
library(ggplot2)
library(knitr)
data_no_NA <- data[!is.na(data$steps), ]
date.steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
ggplot(date.steps, aes(date, steps)) + geom_bar(stat = "identity")
24*60*60
24*60
60 / 5
60 / 5 * 24
24 * 60
?ddply
average_date <- ddply(data_no_NA, .(interval), summarize, steps=mean(steps))
head(average_date)
g <- ggplot(average_date, aes(interval, steps)) + geom_line()
g
max_steps <- max(average_date$steps)
max_steps\
max_steps
max_index <- which(max_steps)
?which
average_date[average_date$steps == max(average_date$steps), ]
complete.cases(data)
data
data <- read.csv("activity.csv", stringsAsFactors = F)
data
head(data)
complete.cases(data)
length(complete.cases(data)0
length(complete.cases(data))
dim(data)
head(data, n = 9998)
sum(!complete.cases(data))
?join
?merge
join(data, average_date)
head(join(data, average_date))
head(data)
head(average_date)
tmp <- join(data, average_date)
View(tmp)
merge(data, average_date, by = "interval", suffixes = c("",
".y"))
tmp <- merge(data, average_date, by = "interval", suffixes = c("",
".y"))
tmp
head(tmp)
head(average_date)
average_date
head(average_date)
average_date.name
average_date.names
names(average_date)
names(average_date)[2] <- "dfasdf"
names(average_date)
names(average_date)["ave_steps"]
names(average_date)[2] <- "ave_steps"]
average_date[average_date$steps == max(average_date$steps), ]
average_date[average_date$steps == max(average_date$steps), ]
average_date
names(average_date)[2] <- "ave_steps"
head(ave)
head(average_date)
merged <- arrange(join(data, average_date), interval)
head(merged)
head(data)
head(average_date)
> merged_data <- join(data, average_date)
merged_data <- join(data, average_date)
head(merged_data)
!complete.cases(steps)
!complete.cases(merged_data)
head(!complete.cases(merged_data))
tmp_data <- data$steps[!complete.cases(steps)]
tmp_data <- data$steps[!complete.cases(data$steps)]
tmp_data
tmp_data <- data$steps[!complete.cases(data$steps)] <- "1"
data
data <- read.csv("activity.csv", stringsAsFactors = F)
x <- 1:5
y <- 10 : 15
x
x <- y
x
x <- c(1, 1, 2)
y <- c(3, 4, 5)
x[x == 1]
x[x == 1] <- c(3, 4)
x
merged_data$steps[!complete.cases(merged_data)] <- merged_data$ave_steps[!complete.cases(merged_data)]
head(merged_data)
merged_data <- join(data, average_date)
na_index <- !complete.cases(merged_data)
merged_data$steps[na_index] <- merged_data$ave_steps[na_index]
new_date_steps <- ddply(merged_data, .(date), summarize, steps=sum(steps))
g <- ggplot(new_date_steps, aes(date, steps)) + geom_bar("identity")
g <- ggplot(new_date_steps, aes(date, steps)) + geom_bar(stat = "identity")
g
str(merged_data)
str(data)
data$date <- as.Date(data$date, "%Y-%m-%d")
merged_data <- join(data, average_date)
na_index <- !complete.cases(merged_data)
merged_data$steps[na_index] <- merged_data$ave_steps[na_index]
new_date_steps <- ddply(merged_data, .(date), summarize, steps=sum(steps))
g <- ggplot(new_date_steps, aes(date, steps)) + geom_bar(stat = "identity")
g
?as.Date
data$date <- as.Date(data$date, "%Y-%m-%d", tz = "NZ")
data_no_NA <- data[!is.na(data$steps), ]
date_steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
g<- ggplot(date_steps, aes(date, steps)) + geom_bar(stat = "identity")
plot(g)
date
month.abb
?date
weekdays(data$date)
weekdays(data$date,abbreviate = T)
data$date[1]
tmp <- data$date[1]
str(tmp)
?weekdays
tmp <- as.Date(tmp, tz = "GMT")
tmp
weekdays(tmp)
data_weekdays <- weekdays(merged_data$date)
data_weekdays
weekdays(tmp)
weekdays(tmp) == "Monday"
today <-Sys.Date()
today
format(today, format="%B %d %Y")
day_type <- function(date) {
if (weekdays(date) %in% c("星期六", "星期日")) {
return ("weekend")
} else {
return ("weekday")
}
}
sapply(data_no_NA$date, day_type)
g <- g + facet_grid(. ~ data_type)
g
g <- ggplot(data_no_NA, aes(interval, steps))
g <- g + geom_line()
g <- g + facet_grid(. ~ data_type)
g
g <- ggplot(data_no_NA, aes(interval, steps))
g <- g + geom_line()
g
average_week <- ddply(data_no_NA, .(day_type, interval), summarise, steps=mean(steps))
average_week <- ddply(data_no_NA, .(day_type, interval), summarise, steps=mean(steps))
data_no_NA
head(data_no_NA)
data_no_NA$day_type <- as.factor(sapply(data_no_NA, day_type))
sapply(data_no_NA, day_type)
unzip("repdata-data-activity.zip")
data <- read.csv("activity.csv", stringsAsFactors = F)
data$date <- as.Date(data$date, "%Y-%m-%d")
library(plyr)
library(ggplot2)
data_no_NA <- data[!is.na(data$steps), ]
date_steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
g<- ggplot(date_steps, aes(date, steps)) + geom_bar(stat = "identity")
plot(g)
mean(date_steps$steps)
# median of steps
average_date <- ddply(data_no_NA, .(interval), summarize, steps=mean(steps))
g <- ggplot(average_date, aes(interval, steps)) + geom_line()
plot(g)
average_date[average_date$steps == max(average_date$steps), ]
names(average_date)[2] <- "ave_steps"
sum(!complete.cases(data))
merged_data <- join(data, average_date)
na_index <- !complete.cases(merged_data)
merged_data$steps[na_index] <- merged_data$ave_steps[na_index]
# plot the histogram
new_date_steps <- ddply(merged_data, .(date), summarize, steps=sum(steps))
g <- ggplot(new_date_steps, aes(date, steps)) + geom_bar(stat = "identity")
plot(g)
mean(new_date_steps$steps)
# median of steps
median(new_date_steps$steps)
day_type <- function(date) {
if (weekdays(date) %in% c("星期六", "星期日")) {
return ("weekend")
} else {
return ("weekday")
}
}
data_no_NA$day_type <- as.factor(sapply(data_no_NA, day_type))
data_no_NA$day_type <- as.factor(sapply(data_no_NA$date, day_type))
average_week <- ddply(data_no_NA, .(day_type, interval), summarize, steps=mean(steps))
g <- ggplot(average_week, aes(interval, steps))
g <- g + geom_line()
g
